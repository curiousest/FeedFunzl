/*
 * File: app/view/EditCustomerDetails.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Funzl.view.EditCustomerDetails', {
    extend: 'Ext.form.Panel',
    requires: ['Ext.form.FieldSet',
        'Ext.field.Email',
        'Ext.field.Number'],

    config: {
        itemId: 'editCustomerDetails',
        layout: {
            type: 'vbox'
        },
        scrollable: 'vertical',
        url: '',
        items: [
            {
                xtype: 'fieldset',
                title: 'Basic Customer Info.',
                items: [
                    {
                        xtype: 'textfield',
                        label: 'Customer Name',
                        name: 'name'
                    },
                    {
                        xtype: 'emailfield',
                        label: 'Customer Email',
                        name: 'email',
                        placeHolder: 'email@example.com'
                    },
                    {
                        xtype: 'numberfield',
                        label: 'Customer Phone Number',
                        name: 'phoneNo'
                    }
                ]
            }
        ],
        listeners: [
            {
                fn: 'onChange',
                event: 'change',
                delegate: 'textfield'
            }
        ]
    },

    onChange: function(textfield, newValue, oldValue, options) {
        if (oldValue){
            var tempValues = {};
            tempValues[textfield.getName()] = newValue;
            var tempRecord = this.getRecord();
            tempRecord.mergeData(tempValues);
            this.setRecord(tempRecord);
        }
    },

    setRecord: function(record) {
        this.callParent([record]);
        /*** uncomment for array of contacts text fields to be displayed
        if (this.items.length <= 3)
        {
        var contacts = record.data.contacts;
        for (var contact in contacts){
        var contactFieldSet = Ext.create('Ext.form.FieldSet',{
        title: 'Contact ' + contact
        });
        this.add(contactFieldSet);
        var title = Ext.create('Ext.field.Text',{value:contacts[contact].title, label:'Title'}),
        fname = Ext.create('Ext.field.Text',{value:contacts[contact].firstName, label:'First Name'}),
        lname = Ext.create('Ext.field.Text',{value:contacts[contact].lastName, label:'Last Name'}),
        email = Ext.create('Ext.field.Text',{value:contacts[contact].email, label:'Email'}),
        mobile = Ext.create('Ext.field.Text',{value:contacts[contact].mobile, label:'Mobile'}),
        work = Ext.create('Ext.field.Text',{value:contacts[contact].work, label:'Work'});
        contactFieldSet.add(title);
        contactFieldSet.add(fname);
        contactFieldSet.add(lname);
        contactFieldSet.add(email);
        contactFieldSet.add(mobile);
        contactFieldSet.add(work);
        }
        }*/
    },

    getFields: function(byName) {
        var fields = this.callParent([byName]);
        /***uncomment & debug to enable deep nesting of form names
        //for each field
        for (var field in fields){
            //split the field into a dot-separated array
            var fieldArray = field.split(".");

            //if the object is nested
            if (fieldArray.length > 1){

                var tempHolder = fields[field];
                var currentLocation = fields;
                var previousLocation;
                var item;

                //for each level of nesting
                for (item in fieldArray){
                    previousLocation = currentLocation;
                    //if the object at that level doesn't exist, add it
                    if (!currentLocation.hasOwnProperty(fieldArray[item])){
                        currentLocation[fieldArray[item]] = {};
                    }
                    //update the current location one level deeper
                    currentLocation = currentLocation[fieldArray[item]];
                }
                //set the value of the deepest nested object to be the original object value
                previousLocation[item] = tempHolder;
            }
        }*/
        return fields;
    }

});